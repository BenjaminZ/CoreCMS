// <auto-generated />
using System;
using CoreCMS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreCMS.Persistence.Migrations
{
    [DbContext(typeof(CMSDbContext))]
    [Migration("20190522063630_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("CoreCMS.Domain.Entities.AdminMenu", b =>
                {
                    b.Property<int>("AdminMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AdminMenuID");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("AddedBy");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(128);

                    b.Property<string>("IconPath")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime?>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("OperationLevel")
                        .HasMaxLength(256);

                    b.Property<int>("OrderNumber");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnName("ParentMenuID");

                    b.Property<string>("Url")
                        .HasMaxLength(128);

                    b.HasKey("AdminMenuId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("AdminMenus");
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ArticleID");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("AddedBy");

                    b.Property<int>("ArticleCategoryId")
                        .HasColumnName("ArticleCategoryID");

                    b.Property<string>("Author")
                        .HasMaxLength(64);

                    b.Property<string>("Content")
                        .HasColumnType("Text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHot")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInCarousel")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPinned")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime?>("ModifyTime");

                    b.Property<int>("OrderNumber");

                    b.Property<string>("Origin")
                        .HasMaxLength(128);

                    b.Property<int>("PicturePath")
                        .HasMaxLength(128);

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(512);

                    b.Property<string>("SeoKeywords")
                        .HasMaxLength(256);

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(128);

                    b.Property<int>("Title")
                        .HasMaxLength(128);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("ArticleId");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("ArticleCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ArticleCategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Depth");

                    b.Property<string>("IconPath")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("OrderNumber");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnName("ParentCategoryID");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(512);

                    b.Property<string>("SeoKeywords")
                        .HasMaxLength(256);

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(128);

                    b.HasKey("ArticleCategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("AddedBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("CellPhone")
                        .HasMaxLength(32);

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<string>("HeadShot")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("LastLoginIp")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ManagerRoleId")
                        .HasColumnName("ManagerRoleID");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime?>("ModifyTime")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime");

                    b.Property<string>("NickName")
                        .HasMaxLength(32);

                    b.Property<string>("Note");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("ManagerId");

                    b.HasIndex("ManagerRoleId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.ManagerRole", b =>
                {
                    b.Property<int>("ManagerRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerRoleID");

                    b.Property<DateTime>("AddTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("AddedBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSystemDefault")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("ManagerRoleName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("ManagerRoleType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(2);

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTime?>("ModifyTime")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime");

                    b.HasKey("ManagerRoleId");

                    b.ToTable("ManagerRoles");
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.OperationLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LogID");

                    b.Property<string>("Note")
                        .HasMaxLength(256);

                    b.Property<DateTime>("OperateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OperationType")
                        .HasMaxLength(32);

                    b.Property<int>("OperatorId")
                        .HasColumnName("OperatorID");

                    b.Property<string>("OperatorIp")
                        .HasMaxLength(64);

                    b.HasKey("LogId");

                    b.HasIndex("OperatorId");

                    b.ToTable("OperationLogs");
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.RoleAccess", b =>
                {
                    b.Property<int>("RoleAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleAccessID");

                    b.Property<string>("AccessType")
                        .HasMaxLength(128);

                    b.Property<int>("AdminMenuId")
                        .HasColumnName("AdminMenuID");

                    b.Property<int>("ManagerRoleId")
                        .HasColumnName("ManagerRoleID");

                    b.HasKey("RoleAccessId");

                    b.HasIndex("AdminMenuId");

                    b.HasIndex("ManagerRoleId");

                    b.ToTable("RoleAccesses");
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.AdminMenu", b =>
                {
                    b.HasOne("CoreCMS.Domain.Entities.AdminMenu", "ParentMenu")
                        .WithMany("ChildMenus")
                        .HasForeignKey("ParentMenuId")
                        .HasConstraintName("FK_ParentMenus_ChildMenus");
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.Article", b =>
                {
                    b.HasOne("CoreCMS.Domain.Entities.ArticleCategory", "ArticleCategory")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleCategoryId")
                        .HasConstraintName("FK_Articles_ArticleCategories")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.ArticleCategory", b =>
                {
                    b.HasOne("CoreCMS.Domain.Entities.ArticleCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_ParentCategories_ChildCategories");
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.Manager", b =>
                {
                    b.HasOne("CoreCMS.Domain.Entities.ManagerRole", "ManagerRole")
                        .WithMany("Managers")
                        .HasForeignKey("ManagerRoleId")
                        .HasConstraintName("FK_Managers_ManagerRoles")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.OperationLog", b =>
                {
                    b.HasOne("CoreCMS.Domain.Entities.Manager", "Operator")
                        .WithMany("OperationLogs")
                        .HasForeignKey("OperatorId")
                        .HasConstraintName("FK_OperationLogs_Managers")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreCMS.Domain.Entities.RoleAccess", b =>
                {
                    b.HasOne("CoreCMS.Domain.Entities.AdminMenu", "AdminMenu")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("AdminMenuId")
                        .HasConstraintName("FK_RoleAccesses_AdminMenus")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreCMS.Domain.Entities.ManagerRole", "ManagerRole")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("ManagerRoleId")
                        .HasConstraintName("FK_RoleAccesses_ManagerRoles")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
